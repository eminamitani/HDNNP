#!/usr/bin/env python
# -*- coding: utf-8 -*-


import csv
import yaml
import shutil
import traceback
from os import path
from glob import glob
from datetime import datetime
from skopt import gp_minimize
from skopt.utils import use_named_args
import numpy as np
import chainer

from modules import settings as stg
from modules import hdnnp
from modules.data import DataGenerator
from modules.preproc import PREPROC
from modules.util import pprint, mkdir, write


def main():
    assert stg.args['mode'] in ['training', 'param_search', 'sym_func', 'test', 'phonon', 'optimize']

    if stg.args['mode'] in ['training', 'param_search']:
        datestr = datetime.now().strftime('%m%d-%H%M%S')
        out_dir = path.join(stg.file['out_dir'], datestr)
        out_dir = stg.mpi['comm'].bcast(out_dir, root=0)
        result_file = path.join(out_dir, 'result.yaml')
        mkdir(out_dir)

        try:
            if stg.args['mode'] == 'training':
                preproc = PREPROC[stg.model['preproc']](stg.model['input_size'])
                generator = DataGenerator(preproc)
                dataset, elements = generator.holdout(ratio=stg.file['ratio'])
                masters, result = hdnnp.training(stg.model, dataset, elements, out_dir)
                if stg.mpi['rank'] == 0:
                    preproc.save(path.join(out_dir, 'preproc.npz'))
                    chainer.serializers.save_npz(path.join(out_dir, 'masters.npz'), masters)
                    hdnnp.dump(stg.model, path.join(out_dir, 'lammps.nnp'), preproc, masters)
                    write(result_file, yaml.dump({
                        'args': stg.args,
                        'file': {'nsample': len(generator), **stg.file},
                        'sym_func': stg.sym_func,
                        'model': stg.model,
                        'result': result,
                    }, default_flow_style=False))

            elif stg.args['mode'] == 'param_search':
                @use_named_args(stg.skopt['space'])
                def objective_func(**params):
                    model_hp = stg.model.copy()
                    for key, value in params.items():
                        value = value if isinstance(value, str) else value.item()
                        if key in ['node', 'activation']:
                            for layer in model_hp['layer'][:-1]:
                                layer[key] = value
                        else:
                            model_hp[key] = value

                    results = []
                    preproc = PREPROC[model_hp['preproc']](model_hp['input_size'])
                    generator = DataGenerator(preproc)
                    for i, (dataset, elements) in enumerate(
                            generator.cross_validation(ratio=stg.file['ratio'], kfold=stg.skopt['kfold'])):
                        _, result = hdnnp.training(model_hp, dataset, elements, out_dir, output=False)
                        results.append(result[stg.model['metrics']])
                    avg = sum(results) / stg.skopt['kfold']
                    pprint(params)
                    pprint('result: {}\n'.format(avg))
                    return avg

                seed = np.random.get_state()[1][0]
                seed = stg.mpi['comm'].bcast(seed, root=0)
                res = gp_minimize(objective_func, stg.skopt['space'],
                                  n_random_starts=stg.skopt['init_num'],
                                  n_calls=stg.skopt['max_num'],
                                  acq_func=stg.skopt['acq_func'],
                                  random_state=seed,
                                  verbose=stg.args['verbose'],
                                  callback=stg.skopt['callback'])

                model_hp = stg.model.copy()
                for space, value in zip(stg.skopt['space'], res.x):
                    value = value if isinstance(value, str) else value.item()
                    if space.name in ['node', 'activation']:
                        for layer in model_hp['layer'][:-1]:
                            layer[space.name] = value
                    else:
                        model_hp[space.name] = value
                preproc = PREPROC[model_hp['preproc']](model_hp['input_size'])
                generator = DataGenerator(preproc)
                dataset, elements = generator.holdout(ratio=stg.file['ratio'])
                masters, result = hdnnp.training(model_hp, dataset, elements, out_dir)
                if stg.mpi['rank'] == 0:
                    with open(path.join(out_dir, 'skopt_result.csv'), 'w') as f:
                        writer = csv.writer(f, lineterminator='\n')
                        writer.writerow([space.name for space in stg.skopt['space']] + ['score'])
                        writer.writerows([x + [fun] for x, fun in zip(res.x_iters, res.func_vals)])
                    preproc.save(path.join(out_dir, 'preproc.npz'))
                    chainer.serializers.save_npz(path.join(out_dir, 'masters.npz'), masters)
                    hdnnp.dump(model_hp, path.join(out_dir, 'lammps.nnp'), preproc, masters)
                    write(result_file, yaml.dump({
                        'args': stg.args,
                        'file': {'nsample': len(generator), **stg.file},
                        'sym_func': stg.sym_func,
                        'model': model_hp,
                        'result': result,
                    }, default_flow_style=False))

        except:
            if stg.mpi['rank'] == 0:
                pprint(traceback.format_exc())
                shutil.rmtree(out_dir)
        else:
            shutil.copy('./modules/settings.py', path.join(out_dir, 'settings.py'))

    elif stg.args['mode'] in ['sym_func']:
        preproc = PREPROC[None](stg.model['input_size'])
        for _ in DataGenerator(preproc).holdout(ratio=stg.file['ratio']):
            pass

    elif stg.args['mode'] in ['test', 'phonon', 'optimize']:
        masters_paths = stg.args['masters'] if stg.args['masters'] \
            else sorted(glob(path.join(stg.file['out_dir'], '*', 'masters.npz')))[-1:]
        poscar = path.join(stg.file['test_dir'], 'POSCAR')
        for masters_path in masters_paths:
            with open(path.join(path.dirname(masters_path), 'result.yaml')) as f:
                stg_yaml = yaml.load(f)
                sf_hp = stg_yaml['sym_func']
                model_hp = stg_yaml['model']
            if stg.args['mode'] == 'test':
                _, energy, force = hdnnp.predict(sf_hp, model_hp, masters_path, poscar)
                pprint('energy:\n{}'.format(energy.data))
                pprint('force:\n{}'.format(force.data))
            elif stg.args['mode'] == 'phonon':
                hdnnp.phonon(sf_hp, model_hp, masters_path, poscar)
                shutil.copy('./modules/phonopy_settings.py', path.join(path.dirname(masters_path), 'phonopy_settings.py'))
            elif stg.args['mode'] == 'optimize':
                e_scale, f_scale = hdnnp.optimize(sf_hp, model_hp, masters_path, poscar)
                pprint('energy-optimized lattice parameter: {}'.format(e_scale))
                pprint('force-optimized lattice parameter: {}'.format(f_scale))


if __name__ == '__main__':
    main()
